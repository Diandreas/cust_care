<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
        
        // Événements de l'assistant marketing
        'App\Events\ClientCreated' => [
            'App\Listeners\SendWelcomeMessage',
            'App\Listeners\CreateBirthdayReminder',
        ],
        
        'App\Events\MessageReceived' => [
            'App\Listeners\ProcessAutoResponse',
            'App\Listeners\UpdateClientActivity',
        ],
        
        'App\Events\CampaignSent' => [
            'App\Listeners\UpdateCampaignMetrics',
            'App\Listeners\LogCampaignActivity',
        ],
        
        'App\Events\AutomationRuleTriggered' => [
            'App\Listeners\ExecuteAutomationAction',
            'App\Listeners\LogAutomationExecution',
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        // Enregistrer les événements personnalisés
        Event::listen('marketing.content.generated', function ($contentData) {
            // Log ou traitement spécial pour le contenu généré par IA
            \Log::info('Content generated by AI', $contentData);
        });

        Event::listen('whatsapp.message.sent', function ($messageData) {
            // Suivi des messages WhatsApp envoyés
            \Log::info('WhatsApp message sent', $messageData);
        });

        Event::listen('automation.rule.executed', function ($executionData) {
            // Suivi des exécutions d'automatisation
            \Log::info('Automation rule executed', $executionData);
        });
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}